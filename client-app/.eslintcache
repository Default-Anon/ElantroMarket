[{"D:\\Projects\\ElantroMarket\\client-app\\src\\index.js":"1","D:\\Projects\\ElantroMarket\\client-app\\src\\reportWebVitals.js":"2","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\nav\\NavBar.jsx":"3","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\sidebar\\Sidebar.jsx":"4","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\dashboard\\ProductDashboard.jsx":"5","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\api\\agent.js":"6","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\dashboard\\ProductList.jsx":"7","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\layout\\App.js":"8","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\SignIn.jsx":"9","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\Login.jsx":"10","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\SignUp.jsx":"11","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\Profile.jsx":"12","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\product\\ProductEdit.jsx":"13","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\product\\ProductCategoryes.jsx":"14","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\TVPage.jsx":"15","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\ComputersPage.jsx":"16","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\TabletPage.jsx":"17","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\SmartphonesPage.jsx":"18","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\NotebooksPage.jsx":"19","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\product\\ProductPage.jsx":"20"},{"size":447,"mtime":1609495255673,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1608794019852,"results":"23","hashOfConfig":"22"},{"size":8060,"mtime":1610272745880,"results":"24","hashOfConfig":"22"},{"size":6242,"mtime":1610179674964,"results":"25","hashOfConfig":"22"},{"size":5548,"mtime":1610190268640,"results":"26","hashOfConfig":"22"},{"size":1338,"mtime":1610190188419,"results":"27","hashOfConfig":"22"},{"size":6942,"mtime":1610272935282,"results":"28","hashOfConfig":"22"},{"size":1996,"mtime":1610272080423,"results":"29","hashOfConfig":"22"},{"size":469,"mtime":1609497608920,"results":"30","hashOfConfig":"22"},{"size":5112,"mtime":1609605169622,"results":"31","hashOfConfig":"22"},{"size":5776,"mtime":1609670322995,"results":"32","hashOfConfig":"22"},{"size":15926,"mtime":1610113013114,"results":"33","hashOfConfig":"22"},{"size":5875,"mtime":1610037942568,"results":"34","hashOfConfig":"22"},{"size":5082,"mtime":1610114077689,"results":"35","hashOfConfig":"22"},{"size":5033,"mtime":1610179950969,"results":"36","hashOfConfig":"22"},{"size":5054,"mtime":1610179979556,"results":"37","hashOfConfig":"22"},{"size":5046,"mtime":1610179956153,"results":"38","hashOfConfig":"22"},{"size":5060,"mtime":1610179968456,"results":"39","hashOfConfig":"22"},{"size":5054,"mtime":1610179975146,"results":"40","hashOfConfig":"22"},{"size":4593,"mtime":1610283372074,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1iq995v",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\ElantroMarket\\client-app\\src\\index.js",[],["94","95"],"D:\\Projects\\ElantroMarket\\client-app\\src\\reportWebVitals.js",[],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\nav\\NavBar.jsx",["96","97","98","99","100","101","102","103","104","105","106"],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\sidebar\\Sidebar.jsx",["107","108","109","110","111","112","113","114","115","116","117","118","119"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu, Tv, Smartphone, Laptop, Computer, Tablet, VideoLabel } from '@material-ui/icons'\r\nimport agent from '../../app/api/agent'\r\nimport { NavLink } from 'react-router-dom';\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        background: 'gray',\r\n        color: 'white'\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(8) + 1,\r\n        },\r\n        background: 'gray',\r\n        color: 'white'\r\n    },\r\n    toolbar: {\r\n        backgroundColor: 'gray',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    paperSidebar: {\r\n        background: 'gray',\r\n        color: 'white'\r\n    },\r\n}));\r\n\r\nexport default function Sidebar(props) {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(props.open);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const HandleCategoryClicked = (category) => {\r\n\r\n    }\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            classes={{ paper: classes.paperSidebar, root: classes.rootSidebar }}\r\n            className={clsx(classes.drawer, {\r\n                [classes.drawerOpen]: open,\r\n                [classes.drawerClose]: !open,\r\n            })}\r\n            classes={{\r\n                paper: clsx({\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                }),\r\n            }}\r\n        >\r\n            <div className={classes.toolbar}>\r\n                <IconButton\r\n                    onClick={() => { setOpen(!open); }}\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    style={{ paddingLeft: theme.spacing(3) }}\r\n                >\r\n                    <Menu />\r\n                </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n                <NavLink to={{ pathname: '/product/category/TV' }} style={{ color: 'black', textDecoration: \"none\" }}>\r\n                    <ListItem button key={'TV'}>\r\n                        <ListItemIcon><Tv /> </ListItemIcon>\r\n                        <ListItemText primary={'Телевизоры'} />\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={{ pathname: '/product/category/Notebooks' }} style={{ color: 'black', textDecoration: \"none\" }}>\r\n                    <ListItem button key={'Notebooks'}>\r\n                        <ListItemIcon><Laptop /> </ListItemIcon>\r\n                        <ListItemText primary={'Ноутбуки'} />\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={{ pathname: '/product/category/Computers' }} style={{ color: 'black', textDecoration: \"none\" }}>\r\n                    <ListItem button key={'Computers'}>\r\n                        <ListItemIcon><VideoLabel /> </ListItemIcon>\r\n                        <ListItemText primary={'Компьютеры'} />\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={{ pathname: '/product/category/Smartphones' }} style={{ color: 'black', textDecoration: \"none\" }}>\r\n                    <ListItem button key={'Smartphones'}>\r\n                        <ListItemIcon><Smartphone /></ListItemIcon>\r\n                        <ListItemText primary={'Смартфоны'} />\r\n                    </ListItem>\r\n                </NavLink>\r\n                <NavLink to={{ pathname: '/product/category/Tablets' }} style={{ color: 'black', textDecoration: \"none\" }}>\r\n                    <ListItem button key={'Tablets'}>\r\n                        <ListItemIcon><Tablet /> </ListItemIcon>\r\n                        <ListItemText primary={'Планшеты'} />\r\n                    </ListItem>\r\n                </NavLink>\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                    <ListItem button key={text}>\r\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                        <ListItemText primary={text} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\dashboard\\ProductDashboard.jsx",["120","121","122"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../app/api/agent'\r\nimport ProductList from './ProductList';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\nexport default function ProductDashboard() {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n\r\n\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchText == \"\") {\r\n            agent.Products.list()\r\n                .then(response => {\r\n                    let products = [];\r\n                    response.forEach((product) => {\r\n                        products.push(product);\r\n                    })\r\n                    setProducts(products);\r\n                })\r\n        }\r\n        else {\r\n            agent.Filters.search('any', searchText)\r\n                .then(response => {\r\n                    let products = [];\r\n                    response.forEach((product) => {\r\n                        products.push(product);\r\n                    })\r\n                    setProducts(products);\r\n                })\r\n        }\r\n        const id = setInterval(() => { setSearchText(document.getElementById('SearchBar1').value) }, 100);\r\n        return () => clearInterval(id);\r\n    }, [searchText])\r\n    return (\r\n        <>{openImage && (\r\n            <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                onMovePrevRequest={() =>\r\n                    setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                }\r\n                onMoveNextRequest={() =>\r\n                    setPhotoIndex((photoIndex + 1) % images.length)\r\n                }\r\n                onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n        )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\api\\agent.js",["123"],"import axios from 'axios'\r\n\r\naxios.defaults.baseURL = \"https://localhost:5001/api\";\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n    get: (url) => axios.get(url).then(responseBody),\r\n    post: (url, body) => axios.post(url, body).then(responseBody),\r\n    put: (url, body) => axios.put(url, body).then(responseBody),\r\n    del: (url) => axios.delete(url).then(responseBody)\r\n}\r\n\r\nconst Products = {\r\n    list: () => requests.get('/product'),\r\n    details: (id) => requests.get(`/product/${id}`),\r\n    create: (product) => requests.post('/product', product),\r\n    update: (id, product) => requests.put(`/product/${id}`, product),\r\n    delete: (id) => requests.del(`/product/${id}`)\r\n}\r\nconst SignInManager = {\r\n    login: (user) => requests.post('user/login',user),\r\n    register: (user) => requests.post('user/register', user),\r\n    currentUser: () => requests.get('user')\r\n}\r\nconst Filters = {\r\n    list: (category) => requests.get(`/filter/${category}`),\r\n    search: (category, searchText) => requests.get(`/filter/${category}/${searchText}`)\r\n};\r\nexport default {\r\n    Products,\r\n    SignInManager,\r\n    Filters\r\n}","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\dashboard\\ProductList.jsx",["124","125","126","127","128","129"],"D:\\Projects\\ElantroMarket\\client-app\\src\\app\\layout\\App.js",["130","131","132","133"],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\SignIn.jsx",["134","135","136","137","138"],"import React from 'react';\r\nimport { makeStyles, theme } from '@material-ui/core/styles';\r\nimport Login from './Login'\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport SignUp from './SignUp';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: '100px',\r\n        paddingTop: '50px'\r\n    }\r\n\r\n}));\r\nconst SignIn = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Login />\r\n    );\r\n}\r\n\r\nexport default SignIn;\r\n","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\Login.jsx",[],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\SignUp.jsx",[],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\user\\Profile.jsx",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, theme } from '@material-ui/core/styles';\r\nimport { flexbox } from '@material-ui/system'\r\nimport { Link, Box, Card, Select, CardMedia, Container, Typography, CardActionArea, CardContent, Paper, Button, TextField, TextareaAutosize, ButtonGroup, InputLabel, MenuItem, FormControl, Switch, FormGroup } from '@material-ui/core';\r\nimport Logo from '../../app/images/logo.jpg'\r\nimport agent from '../../app/api/agent'\r\nimport { Add, Edit, Delete } from '@material-ui/icons'\r\nimport { FormControlLabel } from '@material-ui/core';\r\nimport Guid from 'guid'\r\nimport { Redirect } from 'react-router-dom';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginLeft: '37px',\r\n        marginTop: '64px',\r\n        [theme.breakpoints.only(\"xs\")]: {\r\n            width: '85vw'\r\n        },\r\n        [theme.breakpoints.only(\"sm\")]: {\r\n            width: '87vw'\r\n        },\r\n        [theme.breakpoints.only(\"md\")]: {\r\n            width: '90vw'\r\n        },\r\n        [theme.breakpoints.only(\"lg\")]: {\r\n            width: '92vw'\r\n        },\r\n    },\r\n    box: {\r\n        [theme.breakpoints.only('sm')]: {\r\n            width: '87vw'\r\n        },\r\n        [theme.breakpoints.only('xs')]: {\r\n            width: '84vw'\r\n        }\r\n    },\r\n    boxImage: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        [theme.breakpoints.only('lg')]: {\r\n            maxWidth: '700px'\r\n        },\r\n        border: '1px solid yellow'\r\n    },\r\n    boxName: {\r\n        border: '1px solid black',\r\n        justifyContent: 'center',\r\n        display: 'flex'\r\n    },\r\n    paper: {\r\n    },\r\n    boxBtns: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    cardMediaStyles: {\r\n        objectFit: 'cover'\r\n    },\r\n    InfoUser: {\r\n        display: 'flex',\r\n        minHeight: '200px',\r\n        backgroundColor: '#521b44',\r\n        color: 'pink',\r\n    },\r\n    adminForms: {\r\n        border: '1px solid green',\r\n        marginTop: '10px',\r\n    },\r\n    adminFormsCreate: {\r\n        border: '2px solid black',\r\n        [theme.breakpoints.only(\"lg\")]: {\r\n            width: '550px'\r\n        },\r\n        maxWidth: '700px',\r\n    },\r\n    textFieldStyles: {\r\n        color: 'black',\r\n    },\r\n    adminBoxButtons: {\r\n        display: 'flex'\r\n    },\r\n    textAreaDescription: {\r\n        height: '250px',\r\n        [theme.breakpoints.only('lg')]: {\r\n            width: '540px'\r\n        },\r\n        fontSize: '18px'\r\n    }\r\n}))\r\n\r\nconst Profile = () => {\r\n    const classes = useStyles();\r\n    const [items, setItems] = useState([]);\r\n    const [signOut, setSignOut] = useState(false);\r\n    const [productId, setId] = useState(\"\");\r\n    const [images, setImages] = useState([1, 2, 3, 4, 5, 6, 7])\r\n    const [item, setItem] = useState({});\r\n    const [user, setUser] = useState({});\r\n    const [createImages, setCreateImages] = useState([{}]);\r\n    const [lookImages, setLookImages] = useState(false);\r\n    const [labelCounter, setImagesLabelCounter] = useState('');\r\n    const SetImagesHandler = (imageUrl, index) => {\r\n        let new_item = [{ ...item }];\r\n        console.log(`imgUrlOld: ${new_item[0].images[index].imageUrl}`);\r\n        new_item[0].images[index].imageUrl = imageUrl;\r\n        setItem(new_item[0]);\r\n        new_item = [];\r\n        console.log(item)\r\n    }\r\n    const SetCreateImagesHandler = (imageUrl, i) => {\r\n        if (labelCounter === \"\") {\r\n            setId(Guid.create());\r\n        }\r\n        if (i === 1) {\r\n            setCreateImages([{ 'productId': labelCounter, 'imageUrl': imageUrl, 'imageId': Guid.create() }])\r\n        }\r\n        else {\r\n            let imagesBackup = [];\r\n            createImages.map((item) => {\r\n                imagesBackup.push(item);\r\n            })\r\n            imagesBackup.push({ 'productId': labelCounter, 'imageUrl': imageUrl, 'imageId': Guid.create() });\r\n            setCreateImages(imagesBackup);\r\n            setItem({ ...item, 'images': [...createImages] })\r\n            console.log(`item: ${{ ...item }} `);\r\n        }\r\n    }\r\n    const CreateButtonHandler = () => {\r\n        console.log(item);\r\n        agent.Products.create(item).then(() => setItem({}))\r\n\r\n    }\r\n    const EditButtonHandler = () => {\r\n        console.log(item);\r\n        if (item.productId != '') {\r\n            agent.Products.update(item.productId, item);\r\n        }\r\n    }\r\n    const DeleteButtonHandler = () => {\r\n        if (item.productId != '') {\r\n            agent.Products.delete(item.productId).then(() => { setItem({}); });\r\n        }\r\n    }\r\n    const SignOutButtonClicked = () => {\r\n        localStorage.removeItem('jwt');\r\n        setSignOut(true);\r\n    }\r\n    const setUserHandler = (response) => {\r\n        setUser(response);\r\n    }\r\n    const setItemHandler = (event) => { setItem(event.target.value); };\r\n    const setItemsHandler = (response) => {\r\n        let products = [];\r\n        response.forEach((product) => {\r\n            products.push(product);\r\n        })\r\n        setItems(products);\r\n    }\r\n    useEffect(() => {\r\n        if (Object.keys(user).length === 0) {\r\n            agent.SignInManager.currentUser()\r\n                .then((response) => { setUserHandler(response) });\r\n        }\r\n        if (Object.keys(items).length === 0) {\r\n            agent.Products.list()\r\n                .then((response) => {\r\n                    setItemsHandler(response);\r\n                });\r\n        }\r\n    });\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Box className={classes.box}\r\n                justifyContent=\"space-between\"\r\n                flexDirection=\"row\" display=\"flex\"\r\n                flexWrap=\"wrap\">\r\n                <Box>\r\n                    <Card className={classes.boxImage}>\r\n                        <Link href=\"http://localhost:3000\">\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                    component=\"img\"\r\n                                    height=\"200\"\r\n                                    src={Logo}\r\n                                    className={classes.cardMediaStyles}\r\n                                />\r\n                            </CardActionArea>\r\n                        </Link>\r\n                    </Card>\r\n                </Box>\r\n                <Box className={classes.boxName} justifyContent=\"space-between\" display=\"flex\" flexDirection='column'>\r\n                    <Card className={classes.InfoUser} color=\"inherit\">\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <Typography style={{ fontSize: '25px', textAlign: 'center' }}>{user.username}</Typography>\r\n                                <Typography style={{ fontSize: '32px', textAlign: 'center' }}>Personal discount: {user.bonus}</Typography>\r\n                                <Typography style={{ fontSize: '25px', textAlign: 'center' }}>Status: {user.role}</Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Box>\r\n            </Box>\r\n            {\r\n                user.role === 'admin' ?\r\n                    <>\r\n                        <Box\r\n                            justifyContent=\"space-between\"\r\n                            flexDirection=\"row\" display=\"flex\"\r\n                            flexWrap=\"wrap\" className={classes.adminForms}>\r\n                            <Box>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"none\"\r\n                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                    fullWidth\r\n                                    autoFocus\r\n                                    value={labelCounter}\r\n                                    label=\"Id\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => { setItem({ ...item, 'productId': event.target.value }) }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"none\"\r\n                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                    required={true}\r\n                                    fullWidth\r\n                                    autoFocus\r\n                                    value={item.title}\r\n                                    label=\"Title\"\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => { setItem({ ...item, 'Title': event.target.value }) }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                    fullWidth\r\n                                    autoFocus\r\n                                    label=\"Name\"\r\n                                    value={item.name}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => { setItem({ ...item, 'Name': event.target.value }) }}\r\n                                />\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    autoFocus\r\n                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                    label=\"Category\"\r\n                                    value={item.category}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => { setItem({ ...item, 'Category': event.target.value }) }}\r\n                                />\r\n                                <TextareaAutosize\r\n                                    placeholder=\"Description\"\r\n                                    className={classes.textAreaDescription}\r\n                                    rowsMin={3}\r\n                                    defaultValue={item.description}\r\n                                    onChange={(event) => { setItem({ ...item, 'Description': event.target.value }) }}\r\n                                />\r\n                                <Box>\r\n                                    {lookImages === false ? images.map((item, i) => {\r\n                                        if (i === images.length) {\r\n                                            setLookImages(true);\r\n                                        }\r\n                                        if (i === 0) {\r\n                                            return (\r\n                                                <TextField\r\n                                                    key={i}\r\n                                                    variant=\"outlined\"\r\n                                                    margin=\"normal\"\r\n                                                    required\r\n                                                    fullWidth\r\n                                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                                    autoFocus\r\n                                                    label=\"Images\"\r\n                                                    placeholder=\"ImageUrl ....\"\r\n                                                    InputLabelProps={{ shrink: true }}\r\n                                                    onChange={(event) => { typeof (event.target.value) != 'undefined' && SetCreateImagesHandler(`${event.target.value} `, item); setItem({ ...item, 'mainImage': event.target.value }); }}\r\n                                                />\r\n                                            )\r\n                                        }\r\n                                        return (\r\n                                            <TextField\r\n                                                key={i}\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                inputProps={{ className: classes.textFieldStyles }}\r\n                                                autoFocus\r\n                                                label=\"Images\"\r\n                                                placeholder=\"ImageUrl ....\"\r\n                                                InputLabelProps={{ shrink: true }}\r\n                                                onChange={(event) => { typeof (event.target.value) != 'undefined' && SetCreateImagesHandler(`${event.target.value} `, item); }}\r\n                                            />\r\n                                        );\r\n                                    }) : <Typography>images label error</Typography>}\r\n                                </Box>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    inputProps={{ className: classes.textFieldStyles }}\r\n                                    autoFocus\r\n                                    label=\"Price\"\r\n                                    value={item.price}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    onChange={(event) => { setItem({ ...item, 'Price': event.target.value }) }}\r\n                                />\r\n                            </Box>\r\n                            <Box\r\n                                justifyContent=\"space-between\"\r\n                                flexDirection=\"column\" display=\"flex\">\r\n                                <FormGroup>\r\n                                    <Box>\r\n                                        <Button variant=\"contained\" startIcon={<Add />}\r\n                                            onClick={CreateButtonHandler} color=\"primary\" >\r\n                                            Create\r\n                                    </Button>\r\n                                    </Box>\r\n                                    <FormControlLabel\r\n                                        control={<Switch\r\n                                            onChange={() => { labelCounter != '' ? setImagesLabelCounter([]) : setImagesLabelCounter(Guid.create()) }}\r\n                                            name=\"GenerateId\"\r\n                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                        />}\r\n                                        label=\"Generate Id\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </Box>\r\n                        </Box>\r\n                    </>\r\n                    :\r\n                    <Button>Client</Button>\r\n            }\r\n            <Button variant=\"contained\" color=\"primary\" onClick={SignOutButtonClicked}>\r\n                Sign Out\r\n            </Button>\r\n            { signOut && <p>Вы успешно вышли из аккаунта</p>}\r\n        </Container >\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\Projects\\ElantroMarket\\client-app\\src\\features\\product\\ProductEdit.jsx",[],"D:\\Projects\\ElantroMarket\\client-app\\src\\features\\product\\ProductCategoryes.jsx",["160","161","162","163"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../app/api/agent'\r\nimport ProductList from '../dashboard/ProductList';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst ProductCategoryes = (props) => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState(props.location.aboutProps.category);\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProductCategoryes;\r\n","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\TVPage.jsx",["164","165","166","167"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../api/agent'\r\nimport ProductList from '../../../features/dashboard/ProductList'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst TVPage = () => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState('TV');\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TVPage;","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\ComputersPage.jsx",["168","169","170","171"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../api/agent'\r\nimport ProductList from '../../../features/dashboard/ProductList'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst ComputersPage = () => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState('Computers');\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ComputersPage;","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\TabletPage.jsx",["172","173","174","175"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../api/agent'\r\nimport ProductList from '../../../features/dashboard/ProductList'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst TabletPage = () => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState('Tablets');\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TabletPage;","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\SmartphonesPage.jsx",["176","177","178","179"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../api/agent'\r\nimport ProductList from '../../../features/dashboard/ProductList'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst SmartphonesPage = () => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState('Smartphones');\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SmartphonesPage;","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\category\\NotebooksPage.jsx",["180","181","182","183"],"import { Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Paper, IconButton } from '@material-ui/core'\r\nimport agent from '../../api/agent'\r\nimport ProductList from '../../../features/dashboard/ProductList'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SortIcon from '@material-ui/icons/Sort';\r\nimport { Tooltip } from '@material-ui/core'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Menu } from '@material-ui/icons'\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '60px',\r\n        paddingLeft: '60px'\r\n    },\r\n    sortedSidebarBtn: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n}))\r\n\r\nconst NotebooksPage = () => {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [openImage, setOpenImage] = useState(false);\r\n    const [images, setImages] = useState([]);\r\n    const [photoIndex, setPhotoIndex] = useState(0);\r\n    const [category, setCategory] = useState('Notebooks');\r\n    const onHandleOpenImage = (images) => {\r\n        setImages(images);\r\n        setOpenImage(true);\r\n    }\r\n    const onHandleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const onHandleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Filters.list(category).then((response) => {\r\n            let productsBackup = [];\r\n            response.forEach((product) => {\r\n                productsBackup.push(product);\r\n            })\r\n            setProducts(productsBackup);\r\n        })\r\n    }, []);\r\n    return (\r\n        <>\r\n            {openImage && (\r\n                <Lightbox mainSrc={images[photoIndex].imageUrl}\r\n                    nextSrc={images[(photoIndex + 1) % images.length].imageUrl}\r\n                    prevSrc={images[(photoIndex + images.length - 1) % images.length].imageUrl}\r\n                    onMovePrevRequest={() =>\r\n                        setPhotoIndex((photoIndex + images.length - 1) % images.length)\r\n                    }\r\n                    onMoveNextRequest={() =>\r\n                        setPhotoIndex((photoIndex + 1) % images.length)\r\n                    }\r\n                    onCloseRequest={() => { setOpenImage(false); setPhotoIndex(0) }} />\r\n            )}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                <ProductList products={products} openImage={(image) => { onHandleOpenImage(image) }} />\r\n                <div className={classes.sortedSidebarBtn}>\r\n                    <Tooltip title={<p style={{ fontSize: '12px' }}>Сортировать</p>} placement=\"top\">\r\n                        <Fab color=\"primary\" aria-label=\"sort\" onClick={onHandleOpen}>\r\n                            <SortIcon />\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n                <Drawer anchor=\"right\" open={open} onClose={onHandleClose}>\r\n                    <IconButton\r\n                        onClick={() => { setOpen(!open); }}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        style={{}}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Drawer>\r\n            </Grid >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotebooksPage;","D:\\Projects\\ElantroMarket\\client-app\\src\\app\\pages\\product\\ProductPage.jsx",["184","185","186"],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":3,"column":8,"nodeType":"193","messageId":"194","endLine":3,"endColumn":12},{"ruleId":"191","severity":1,"message":"195","line":7,"column":8,"nodeType":"193","messageId":"194","endLine":7,"endColumn":18},{"ruleId":"191","severity":1,"message":"196","line":12,"column":8,"nodeType":"193","messageId":"194","endLine":12,"endColumn":16},{"ruleId":"191","severity":1,"message":"197","line":15,"column":8,"nodeType":"193","messageId":"194","endLine":15,"endColumn":16},{"ruleId":"191","severity":1,"message":"198","line":16,"column":8,"nodeType":"193","messageId":"194","endLine":16,"endColumn":25},{"ruleId":"191","severity":1,"message":"199","line":18,"column":8,"nodeType":"193","messageId":"194","endLine":18,"endColumn":14},{"ruleId":"191","severity":1,"message":"200","line":22,"column":10,"nodeType":"193","messageId":"194","endLine":22,"endColumn":24},{"ruleId":"191","severity":1,"message":"201","line":23,"column":10,"nodeType":"193","messageId":"194","endLine":23,"endColumn":17},{"ruleId":"191","severity":1,"message":"202","line":24,"column":7,"nodeType":"193","messageId":"194","endLine":24,"endColumn":18},{"ruleId":"191","severity":1,"message":"203","line":99,"column":16,"nodeType":"193","messageId":"194","endLine":99,"endColumn":23},{"ruleId":"191","severity":1,"message":"204","line":112,"column":9,"nodeType":"193","messageId":"194","endLine":112,"endColumn":30},{"ruleId":"191","severity":1,"message":"205","line":5,"column":8,"nodeType":"193","messageId":"194","endLine":5,"endColumn":14},{"ruleId":"191","severity":1,"message":"206","line":6,"column":8,"nodeType":"193","messageId":"194","endLine":6,"endColumn":15},{"ruleId":"191","severity":1,"message":"207","line":8,"column":8,"nodeType":"193","messageId":"194","endLine":8,"endColumn":19},{"ruleId":"191","severity":1,"message":"195","line":9,"column":8,"nodeType":"193","messageId":"194","endLine":9,"endColumn":18},{"ruleId":"191","severity":1,"message":"196","line":12,"column":8,"nodeType":"193","messageId":"194","endLine":12,"endColumn":16},{"ruleId":"191","severity":1,"message":"208","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":23},{"ruleId":"191","severity":1,"message":"209","line":14,"column":8,"nodeType":"193","messageId":"194","endLine":14,"endColumn":24},{"ruleId":"191","severity":1,"message":"210","line":20,"column":40,"nodeType":"193","messageId":"194","endLine":20,"endColumn":48},{"ruleId":"191","severity":1,"message":"211","line":21,"column":8,"nodeType":"193","messageId":"194","endLine":21,"endColumn":13},{"ruleId":"191","severity":1,"message":"212","line":76,"column":11,"nodeType":"193","messageId":"194","endLine":76,"endColumn":27},{"ruleId":"191","severity":1,"message":"213","line":80,"column":11,"nodeType":"193","messageId":"194","endLine":80,"endColumn":28},{"ruleId":"191","severity":1,"message":"214","line":84,"column":11,"nodeType":"193","messageId":"194","endLine":84,"endColumn":32},{"ruleId":"215","severity":1,"message":"216","line":95,"column":13,"nodeType":"217","endLine":100,"endColumn":15},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"219","severity":1,"message":"220","line":59,"column":24,"nodeType":"221","messageId":"222","endLine":59,"endColumn":26},{"ruleId":"223","severity":1,"message":"224","line":36,"column":1,"nodeType":"225","endLine":40,"endColumn":2},{"ruleId":"191","severity":1,"message":"226","line":8,"column":8,"nodeType":"193","messageId":"194","endLine":8,"endColumn":14},{"ruleId":"191","severity":1,"message":"227","line":12,"column":10,"nodeType":"193","messageId":"194","endLine":12,"endColumn":13},{"ruleId":"191","severity":1,"message":"228","line":12,"column":15,"nodeType":"193","messageId":"194","endLine":12,"endColumn":34},{"ruleId":"191","severity":1,"message":"229","line":12,"column":36,"nodeType":"193","messageId":"194","endLine":12,"endColumn":40},{"ruleId":"191","severity":1,"message":"230","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":16},{"ruleId":"191","severity":1,"message":"231","line":18,"column":8,"nodeType":"193","messageId":"194","endLine":18,"endColumn":19},{"ruleId":"191","severity":1,"message":"232","line":4,"column":17,"nodeType":"193","messageId":"194","endLine":4,"endColumn":27},{"ruleId":"191","severity":1,"message":"233","line":4,"column":29,"nodeType":"193","messageId":"194","endLine":4,"endColumn":48},{"ruleId":"191","severity":1,"message":"234","line":4,"column":50,"nodeType":"193","messageId":"194","endLine":4,"endColumn":56},{"ruleId":"191","severity":1,"message":"235","line":5,"column":10,"nodeType":"193","messageId":"194","endLine":5,"endColumn":19},{"ruleId":"191","severity":1,"message":"236","line":2,"column":22,"nodeType":"193","messageId":"194","endLine":2,"endColumn":27},{"ruleId":"191","severity":1,"message":"237","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":23},{"ruleId":"191","severity":1,"message":"238","line":4,"column":25,"nodeType":"193","messageId":"194","endLine":4,"endColumn":30},{"ruleId":"191","severity":1,"message":"239","line":5,"column":8,"nodeType":"193","messageId":"194","endLine":5,"endColumn":14},{"ruleId":"191","severity":1,"message":"240","line":14,"column":11,"nodeType":"193","messageId":"194","endLine":14,"endColumn":18},{"ruleId":"191","severity":1,"message":"236","line":2,"column":22,"nodeType":"193","messageId":"194","endLine":2,"endColumn":27},{"ruleId":"191","severity":1,"message":"241","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":17},{"ruleId":"191","severity":1,"message":"242","line":4,"column":27,"nodeType":"193","messageId":"194","endLine":4,"endColumn":33},{"ruleId":"191","severity":1,"message":"218","line":4,"column":98,"nodeType":"193","messageId":"194","endLine":4,"endColumn":103},{"ruleId":"191","severity":1,"message":"243","line":4,"column":142,"nodeType":"193","messageId":"194","endLine":4,"endColumn":153},{"ruleId":"191","severity":1,"message":"244","line":4,"column":155,"nodeType":"193","messageId":"194","endLine":4,"endColumn":165},{"ruleId":"191","severity":1,"message":"245","line":4,"column":167,"nodeType":"193","messageId":"194","endLine":4,"endColumn":175},{"ruleId":"191","severity":1,"message":"246","line":4,"column":177,"nodeType":"193","messageId":"194","endLine":4,"endColumn":188},{"ruleId":"191","severity":1,"message":"247","line":7,"column":15,"nodeType":"193","messageId":"194","endLine":7,"endColumn":19},{"ruleId":"191","severity":1,"message":"248","line":7,"column":21,"nodeType":"193","messageId":"194","endLine":7,"endColumn":27},{"ruleId":"191","severity":1,"message":"249","line":10,"column":10,"nodeType":"193","messageId":"194","endLine":10,"endColumn":18},{"ruleId":"191","severity":1,"message":"250","line":94,"column":12,"nodeType":"193","messageId":"194","endLine":94,"endColumn":21},{"ruleId":"191","severity":1,"message":"251","line":95,"column":20,"nodeType":"193","messageId":"194","endLine":95,"endColumn":29},{"ruleId":"191","severity":1,"message":"252","line":101,"column":11,"nodeType":"193","messageId":"194","endLine":101,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":118,"column":37,"nodeType":"255","messageId":"256","endLine":118,"endColumn":39},{"ruleId":"191","severity":1,"message":"257","line":132,"column":11,"nodeType":"193","messageId":"194","endLine":132,"endColumn":28},{"ruleId":"219","severity":1,"message":"258","line":134,"column":28,"nodeType":"221","messageId":"222","endLine":134,"endColumn":30},{"ruleId":"191","severity":1,"message":"259","line":138,"column":11,"nodeType":"193","messageId":"194","endLine":138,"endColumn":30},{"ruleId":"219","severity":1,"message":"258","line":139,"column":28,"nodeType":"221","messageId":"222","endLine":139,"endColumn":30},{"ruleId":"191","severity":1,"message":"260","line":150,"column":11,"nodeType":"193","messageId":"194","endLine":150,"endColumn":25},{"ruleId":"219","severity":1,"message":"258","line":328,"column":76,"nodeType":"221","messageId":"222","endLine":328,"endColumn":78},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"265"},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"266"},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"267"},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"268"},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"269"},{"ruleId":"191","severity":1,"message":"218","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"192","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":12},{"ruleId":"191","severity":1,"message":"261","line":45,"column":22,"nodeType":"193","messageId":"194","endLine":45,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":65,"column":8,"nodeType":"264","endLine":65,"endColumn":10,"suggestions":"270"},{"ruleId":"191","severity":1,"message":"236","line":2,"column":22,"nodeType":"193","messageId":"194","endLine":2,"endColumn":27},{"ruleId":"191","severity":1,"message":"271","line":67,"column":16,"nodeType":"193","messageId":"194","endLine":67,"endColumn":21},{"ruleId":"272","severity":1,"message":"273","line":89,"column":45,"nodeType":"274","endLine":89,"endColumn":97},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'clsx' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'MenuIcon' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'Drawer' is defined but never used.","'ShoppingBasket' is defined but never used.","'NavLink' is defined but never used.","'drawerWidth' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'CssBaseline' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","'Computer' is defined but never used.","'agent' is defined but never used.","'handleDrawerOpen' is assigned a value but never used.","'handleDrawerClose' is assigned a value but never used.","'HandleCategoryClicked' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Paper' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Button' is defined but never used.","'Box' is defined but never used.","'responsiveFontSizes' is defined but never used.","'Link' is defined but never used.","'Lightbox' is defined but never used.","'ProductEdit' is defined but never used.","'withRouter' is defined but never used.","'RouteComponentProps' is defined but never used.","'Router' is defined but never used.","'Container' is defined but never used.","'theme' is defined but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","'SignUp' is defined but never used.","'classes' is assigned a value but never used.","'flexbox' is defined but never used.","'Select' is defined but never used.","'ButtonGroup' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'Edit' is defined but never used.","'Delete' is defined but never used.","'Redirect' is defined but never used.","'productId' is assigned a value but never used.","'setImages' is assigned a value but never used.","'SetImagesHandler' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'EditButtonHandler' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'DeleteButtonHandler' is assigned a value but never used.","'setItemHandler' is assigned a value but never used.","'setCategory' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.","ArrayExpression",["277"],["278"],["279"],["280"],["281"],["282"],"'setId' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},{"desc":"283","fix":"285"},{"desc":"283","fix":"286"},{"desc":"283","fix":"287"},{"desc":"283","fix":"288"},{"desc":"283","fix":"289"},"Update the dependencies array to be: [category]",{"range":"290","text":"291"},{"range":"292","text":"291"},{"range":"293","text":"291"},{"range":"294","text":"291"},{"range":"295","text":"291"},{"range":"296","text":"291"},[2254,2256],"[category]",[2218,2220],[2232,2234],[2227,2229],[2236,2238],[2232,2234]]